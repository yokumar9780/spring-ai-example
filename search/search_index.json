{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Spring AI Example Documentation","text":"<p>This repository contains a Spring Boot-based chatbot application leveraging Spring AI capabilities. The project demonstrates various use cases, including vehicle data generation, weather-based recommendations, and airline booking customer support.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The full project documentation is available at the following link:</p> <p>For detailed documentation, visit the MkDocs GitHub Pages.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Vehicle Fake Data Generator: Generate fake vehicle data using a chatbot interface.</li> <li>Weather Recommendations: Fetch weather information, suggest outfits, and recommend places to visit.</li> <li>Airline Booking Support: Provide customer support for airline bookings, including fetching, changing, and canceling bookings.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Refer to the Local Development Setup guide for instructions on setting up the project locally.</p>"},{"location":"#project-structure","title":"Project Structure","text":"<ul> <li>Architecture: High-level overview and component interaction details.</li> <li>Infrastructure: Deployment, CI/CD, monitoring, logging, and cloud services.</li> <li>Setup: Local development and environment configuration.</li> <li>Chatbot Use Cases: Detailed documentation for each chatbot use case.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please refer to the contribution guidelines for more information.</p>"},{"location":"chatbot/usecase/airline_booking_customer_support_agent/","title":"Airline Booking Customer Support Agent","text":"<p>This module provides a chatbot-based customer support system for airline bookings. It includes the following key components:</p> <ul> <li>AssistantController: A REST controller to handle chat interactions.</li> <li>AssistantService: A service to manage booking operations such as fetching, changing, and canceling bookings.</li> <li>AssistantTool: A tool to expose booking-related functionalities to the chatbot.</li> <li>Repositories: Includes <code>CustomerRepository</code> and <code>BookingRepository</code> for database interactions.</li> <li>Models: Includes <code>Customer</code>, <code>Booking</code>, <code>BookingDetails</code>, and related enums.</li> </ul>"},{"location":"chatbot/usecase/airline_booking_customer_support_agent/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant User\n    participant AssistantController\n    participant AssistantService\n    participant BookingRepository\n\n    User-&gt;&gt;AssistantController: POST /api/chat/{chatId}\n    AssistantController-&gt;&gt;AssistantService: Process booking request\n    AssistantService-&gt;&gt;BookingRepository: Fetch booking details\n    BookingRepository--&gt;&gt;AssistantService: Booking data\n    AssistantService--&gt;&gt;AssistantController: Processed response\n    AssistantController--&gt;&gt;User: Chatbot response\n</code></pre>"},{"location":"chatbot/usecase/airline_booking_customer_support_agent/#implementation-details","title":"Implementation Details","text":""},{"location":"chatbot/usecase/airline_booking_customer_support_agent/#assistantcontroller","title":"AssistantController","text":"<ul> <li>Handles chat interactions via the <code>/api/chat</code> endpoint.</li> <li>Uses <code>AssistantService</code> to process user requests.</li> </ul>"},{"location":"chatbot/usecase/airline_booking_customer_support_agent/#assistantservice","title":"AssistantService","text":"<ul> <li>Manages booking operations such as fetching, changing, and canceling bookings.</li> <li>Interacts with <code>BookingRepository</code> and <code>CustomerRepository</code> for database operations.</li> </ul>"},{"location":"chatbot/usecase/airline_booking_customer_support_agent/#assistanttool","title":"AssistantTool","text":"<ul> <li>Provides tools for the chatbot to interact with booking functionalities.</li> </ul>"},{"location":"chatbot/usecase/get_weather_outfit_and_places_by_location/","title":"Get Weather, Outfit, and Places by Location","text":"<p>This module provides functionality to fetch weather information, suggest outfits, and recommend places to visit based on a given location. It includes the following key components:</p> <ul> <li>WeatherController: A REST controller to handle weather-related requests.</li> <li>WeatherTool: A service to fetch weather data using the OpenWeather API.</li> <li>OpenWeatherProxyClient: A proxy client to interact with the OpenWeather API.</li> <li>Models: Includes <code>WeatherResponse</code>, <code>Location</code>, and other related data structures.</li> </ul>"},{"location":"chatbot/usecase/get_weather_outfit_and_places_by_location/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant User\n    participant WeatherController\n    participant WeatherTool\n    participant OpenWeatherProxyClient\n    participant OpenWeatherAPI\n\n    User-&gt;&gt;WeatherController: GET /weather\n    WeatherController-&gt;&gt;WeatherTool: Fetch weather for location\n    WeatherTool-&gt;&gt;OpenWeatherProxyClient: Request weather data\n    OpenWeatherProxyClient-&gt;&gt;OpenWeatherAPI: API call with location\n    OpenWeatherAPI--&gt;&gt;OpenWeatherProxyClient: Weather data response\n    OpenWeatherProxyClient--&gt;&gt;WeatherTool: Weather data\n    WeatherTool--&gt;&gt;WeatherController: WeatherResponse\n    WeatherController--&gt;&gt;User: JSON response with weather, outfit, and places\n</code></pre>"},{"location":"chatbot/usecase/get_weather_outfit_and_places_by_location/#implementation-details","title":"Implementation Details","text":""},{"location":"chatbot/usecase/get_weather_outfit_and_places_by_location/#weathercontroller","title":"WeatherController","text":"<ul> <li>Handles the <code>/weather</code> endpoint.</li> <li>Uses <code>WeatherTool</code> to fetch weather data and generate a response.</li> </ul>"},{"location":"chatbot/usecase/get_weather_outfit_and_places_by_location/#weathertool","title":"WeatherTool","text":"<ul> <li>Fetches weather data using <code>OpenWeatherProxyClient</code>.</li> <li>Processes the data to suggest outfits and places to visit.</li> </ul>"},{"location":"chatbot/usecase/get_weather_outfit_and_places_by_location/#openweatherproxyclient","title":"OpenWeatherProxyClient","text":"<ul> <li>Interacts with the OpenWeather API to fetch weather data.</li> </ul>"},{"location":"chatbot/usecase/vehicle_fake_data_generator/","title":"Vehicle Fake Data Generator","text":"<p>This module provides functionality to generate fake vehicle data using a chatbot interface. It includes the following key components:</p> <ul> <li>VehicleChatbotController: A REST controller to handle requests for generating vehicle data.</li> <li>Vehicle: A record representing the structure of a vehicle object.</li> </ul>"},{"location":"chatbot/usecase/vehicle_fake_data_generator/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant User\n    participant VehicleChatbotController\n    participant ChatClient\n    participant LLM\n\n    User-&gt;&gt;VehicleChatbotController: GET /vehicles?count=10\n    VehicleChatbotController-&gt;&gt;ChatClient: Generate JSON array for 10 trucks\n    ChatClient-&gt;&gt;LLM: Prompt with JSON generation request\n    LLM--&gt;&gt;ChatClient: JSON array response\n    ChatClient--&gt;&gt;VehicleChatbotController: List&lt;Vehicle&gt;\n    VehicleChatbotController--&gt;&gt;User: JSON array of vehicles\n</code></pre>"},{"location":"chatbot/usecase/vehicle_fake_data_generator/#implementation-details","title":"Implementation Details","text":""},{"location":"chatbot/usecase/vehicle_fake_data_generator/#vehiclechatbotcontroller","title":"VehicleChatbotController","text":"<ul> <li>Handles the <code>/vehicles</code> endpoint.</li> <li>Uses <code>ChatClient</code> to interact with the LLM for generating vehicle data.</li> </ul>"},{"location":"chatbot/usecase/vehicle_fake_data_generator/#vehicle","title":"Vehicle","text":"<ul> <li>Represents the structure of a vehicle object with fields like <code>id</code>, <code>vin</code>, <code>brand</code>, etc.</li> </ul>"},{"location":"infrastructure/cloud-services/","title":"Cloud Services","text":"<p>This document outlines the cloud services used or planned for the Spring AI Example project.</p>"},{"location":"infrastructure/cloud-services/#overview","title":"Overview","text":"<p>The project can leverage cloud services for scalability, reliability, and ease of management.</p>"},{"location":"infrastructure/cloud-services/#todo","title":"TODO","text":"<ul> <li>Document integration with cloud databases like AWS RDS or Azure SQL.</li> <li>Add details about deploying the application to cloud platforms like AWS Elastic Beanstalk or Azure App Service.</li> <li>Include instructions for setting up cloud-based monitoring and logging.</li> </ul>"},{"location":"infrastructure/deployment/","title":"Deployment","text":"<p>This document provides guidelines for deploying the Spring AI Example project.</p>"},{"location":"infrastructure/deployment/#overview","title":"Overview","text":"<p>The application is designed to run as a Spring Boot application with PostgreSQL as the database.</p>"},{"location":"infrastructure/deployment/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Build the application:</li> </ol> <p><code>bash    ./mvnw clean package</code></p> <ol> <li>Run the application:</li> </ol> <p><code>bash    java -jar target/chatbot-0.0.1-SNAPSHOT.jar</code></p> <ol> <li> <p>Database Setup:</p> </li> <li> <p>Ensure the PostgreSQL database is running.</p> </li> <li> <p>Use the <code>init.sql</code> script to initialize the database schema and data.</p> </li> <li> <p>Environment Variables:</p> </li> <li>Configure the following variables as needed:<ul> <li><code>OPEN_WEATHER_URL</code></li> <li><code>OPEN_WEATHER_API_KEY</code></li> </ul> </li> </ol>"},{"location":"infrastructure/deployment/#todo","title":"TODO","text":"<ul> <li>Add instructions for deploying to cloud platforms like AWS or Azure.</li> <li>Document CI/CD pipeline setup.</li> </ul>"},{"location":"infrastructure/logging/","title":"Logging","text":"<p>This document describes the logging setup for the Spring AI Example project.</p>"},{"location":"infrastructure/logging/#overview","title":"Overview","text":"<p>Logging is configured using Logback to capture application events and errors.</p>"},{"location":"infrastructure/logging/#configuration","title":"Configuration","text":"<ol> <li> <p>Logback Configuration:</p> </li> <li> <p>The configuration file is located at <code>src/main/resources/logback-spring.xml</code>.</p> </li> <li> <p>Logs are stored in the <code>logs</code> directory under the project root.</p> </li> <li> <p>Log Levels:</p> </li> <li> <p>Default log levels are defined in <code>application.yml</code>:      <code>yaml      logging:        level:          org.springframework: info          com.example: debug</code></p> </li> <li> <p>Log Rotation:</p> </li> <li>Logs are rotated daily and compressed using the <code>SizeAndTimeBasedRollingPolicy</code> in <code>logback-spring.xml</code>.</li> </ol>"},{"location":"infrastructure/logging/#todo","title":"TODO","text":"<ul> <li>Add instructions for integrating with centralized logging systems like ELK or Loki.</li> </ul>"},{"location":"infrastructure/monitoring/","title":"Monitoring","text":"<p>This document outlines the monitoring setup for the Spring AI Example project.</p>"},{"location":"infrastructure/monitoring/#overview","title":"Overview","text":"<p>Monitoring is essential to ensure the application is running smoothly and to identify any issues proactively.</p>"},{"location":"infrastructure/monitoring/#tools-and-technologies","title":"Tools and Technologies","text":"<ul> <li>Spring Boot Actuator: Provides built-in endpoints for monitoring and management.</li> <li>Custom Logs: Configured using <code>logback-spring.xml</code>.</li> </ul>"},{"location":"infrastructure/monitoring/#configuration","title":"Configuration","text":"<ol> <li>Enable Actuator endpoints in <code>application.yml</code>:</li> </ol> <p><code>yaml    management:      endpoints:        web:          exposure:            include: '*'</code></p> <ol> <li> <p>Access Actuator endpoints:</p> </li> <li> <p>Example: <code>http://localhost:8080/actuator/health</code></p> </li> <li> <p>Log Configuration:</p> </li> <li>Logs are configured in <code>logback-spring.xml</code>.</li> <li>Logs are stored in the <code>logs</code> directory.</li> </ol>"},{"location":"infrastructure/monitoring/#todo","title":"TODO","text":"<ul> <li>Add integration with external monitoring tools like Prometheus or Grafana.</li> <li>Document any custom metrics or health checks.</li> </ul>"},{"location":"setup/local-development/","title":"Local Development Setup","text":"<p>This document provides instructions for setting up the local development environment for the Spring AI Example project.</p>"},{"location":"setup/local-development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java Development Kit (JDK): Ensure JDK 21 is installed and configured.</li> <li>Maven: Use the Maven wrapper (<code>mvnw</code> or <code>mvnw.cmd</code>) provided in the project.</li> <li>Docker: Install Docker to run the PostgreSQL database with pgvector.</li> </ul>"},{"location":"setup/local-development/#steps","title":"Steps","text":"<ol> <li>Clone the repository:</li> </ol> <p><code>bash    git clone https://github.com/yokumar9780/spring-ai-example.git    cd spring-ai-example</code></p> <ol> <li>Start the PostgreSQL database using Docker Compose:</li> </ol> <p><code>bash    cd dev/docker-compose    docker-compose up -d</code></p> <ol> <li> <p>Configure the application:</p> </li> <li> <p>Update <code>src/main/resources/application-dev.yaml</code> with your proxy and OpenWeather API details if required.</p> </li> <li> <p>Run the application:</p> </li> </ol> <p><code>bash    ./mvnw spring-boot:run</code></p> <ol> <li>Access the application:</li> <li>The application will be available at <code>http://localhost:8080</code>.</li> </ol>"},{"location":"setup/local-development/#notes","title":"Notes","text":"<ul> <li>The database schema and initial data are automatically set up using the <code>init.sql</code> script.</li> <li>Logs are stored in the <code>logs</code> directory under the project root.</li> </ul>"},{"location":"setup/local-development/#todo","title":"TODO","text":"<ul> <li>Add instructions for running tests.</li> <li>Document any additional environment variables required.</li> </ul>"}]}